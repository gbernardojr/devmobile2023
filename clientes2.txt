package com.example.cadastrocliente

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.ui.Modifier
import com.example.cadastrocliente.ui.theme.CadastroClienteTheme
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.Button
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.TextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.ViewModel

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            CadastroClienteTheme {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {

                }
            }
        }
    }
}

data class Cliente(val nome: String, val email: String, val telefone: String)

class ClienteViewModel  {
    val clientes = mutableStateListOf<Cliente>()

    fun addCliente(cliente: Cliente) {
            clientes.add(cliente)
    }
}

@Composable
fun ClienteListScreen(clienteViewModel: ClienteViewModel) {

    var clientes = clienteViewModel.clientes

    Column(modifier = Modifier.fillMaxSize()) {
        LazyColumn {
            items(clientes) { cliente -> Text("Nome: ${cliente.nome}") }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AddClienteScreen(clienteViewModel: ClienteViewModel) {
    var nome by remember { mutableStateOf("") }
    var email by remember { mutableStateOf("") }
    var telefone by remember { mutableStateOf("") }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        TextField(
            value = nome,
            onValueChange = { nome = it },
            label = { Text("Nome") }
        )

        Spacer(modifier = Modifier.height(16.dp))

        TextField(
            value = email,
            onValueChange = { email = it },
            label = { Text("E-mail") }
        )

        Spacer(modifier = Modifier.height(16.dp))

        TextField(
            value = telefone,
            onValueChange = { telefone = it },
            label = { Text("Telefone") }
        )

        Spacer(modifier = Modifier.height(16.dp))

        Button(
            onClick = {
                // Validar e adicionar o cliente à lista
                if (nome.isNotBlank() && email.isNotBlank() && telefone.isNotBlank()) {
                    val newCliente = Cliente(nome, email, telefone)
                    clienteViewModel.addCliente(newCliente)
                    // onClienteAdded()
                }
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp)
        ) {
            Text("Adicionar Cliente")
        }
    }
}

@Composable
fun ClienteDetailScreen(clienteNome: String, clienteViewModel: ClienteViewModel) {
    val cliente = clienteViewModel.clientes.find { it.nome == clienteNome }

    if (cliente != null) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp)
        ) {
            Text("Detalhes do Cliente", fontSize = 24.sp )
            Spacer(modifier = Modifier.height(16.dp))
            Text("Nome: ${cliente.nome}", fontSize = 18.sp)
            Text("E-mail: ${cliente.email}", fontSize = 18.sp)
            Text("Telefone: ${cliente.telefone}", fontSize = 18.sp)
        }
    } else {
        Text("Cliente não encontrado", fontSize = 20.sp)
    }
}

@Composable
fun ClientApp() {
    
    Button(onClick = {teste()}, modifier = Modifier) {
       Text(text = "Adicionar")
    }
    
}


fun teste(){
    var BaseDados : ClienteViewModel
    AddClienteScreen(BaseDados)
}
